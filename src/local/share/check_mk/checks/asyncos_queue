#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# TODO Evaluate Default Values

asyncos_queue_default_params = {}
factory_settings["asyncos_queue_default_params"] = {
	"queueAvailabilityStatus_levels" : ( 2, 3 ),
	"perCentQueueUtilization_levels" : ( 70, 85 ),
	"workQueueMessages_levels"       : ( 9999, 1000000 ),
}
async_queueAvailStatus_desc = {
	1 : "Space Available",
	2 : "Space Shortage",
	3 : "Full",
}

def inventory_asyncos_queue(info):
	if len(info) >= 1:
		return [ ("Work Queue", {})]
		
def check_asyncos_queue(item,params,info):
	infotext = ""
	perfdata = []
	status   = -1
	#print item
	#print params
	#print info[0]

	## checks ##
	
	queueAvailabilityStatus = int(info[0][1])
	perCentQueueUtilization = int(info[0][0])
	workQueueMessages       = int(info[0][2])
	#print "sss"
	qas_warn, qas_crit = params["queueAvailabilityStatus_levels"]
	qu_warn, qu_crit   = params["perCentQueueUtilization_levels"]
	wqm_warn, wqm_crit = params["workQueueMessages_levels"]
	
	
	if perCentQueueUtilization >= qu_crit:
		status = max( status, 2 )
		infotext += "Utilization %s%% (!!)" % ( perCentQueueUtilization )
	elif perCentQueueUtilization >= qu_warn:
		status = max( status, 1 )
		infotext += "Utilization %s%% (!)" % ( perCentQueueUtilization )
	else:
		status = max( status, 0 )
		infotext += "Utilization %s%%" % ( perCentQueueUtilization )
	
	if queueAvailabilityStatus >= qas_crit:
		status = max( status, 2 )
		infotext += " - Status: %s (!!)" % ( async_queueAvailStatus_desc[queueAvailabilityStatus] )
	elif queueAvailabilityStatus >= qas_warn:
		status = max( status, 1 )
		infotext += " - Status: %s (!)" % ( async_queueAvailStatus_desc[queueAvailabilityStatus] )
	else:
		status = max( status, 0 )
		#infotext += " - Status: %s" % ( async_queueAvailStatus_desc[queueAvailabilityStatus] )

	if workQueueMessages >= wqm_crit:
		status = max( status, 2 )
		infotext += " - Messages %s (!!)" % ( workQueueMessages )
	elif workQueueMessages >= wqm_warn:
		status = max( status, 1 )
		infotext += " - Messages %s (!)" % ( workQueueMessages )
	else:
		status = max( status, 0 )
		infotext += " - Messages %s" % ( workQueueMessages )

	#perfdata.append( ("queueAvailabilityStatus", queueAvailabilityStatus, qas_warn, qas_crit) )

	perfdata.append( ("perCentQueueUtilization", perCentQueueUtilization, qu_warn, qu_crit, 0, 100) )

	perfdata.append( ("workQueueMessages", workQueueMessages, wqm_warn, wqm_crit) )

	## end checks ##

	if infotext == "":
		infotext = "not implemented"
		status   = 3
	
	return (status, infotext, perfdata)

check_info["asyncos_queue"] = {
	'default_levels_variable':  "asyncos_queue_default_params",
	"check_function"        : check_asyncos_queue,
	"inventory_function"    : inventory_asyncos_queue,
	"service_description"   : "Status %s",
	"has_perfdata"          : True,
	'group':                    'asyncos_queue',
	"snmp_info"		    : ( ".1.3.6.1.4.1.15497.1.1.1", [ "4.0", "5.0", "11.0" ]),
	'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.15497."),
}
